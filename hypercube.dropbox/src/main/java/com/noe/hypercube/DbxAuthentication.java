package com.noe.hypercube;

import com.dropbox.core.*;
import com.noe.hypercube.persistence.domain.AccountEntity;
import com.noe.hypercube.service.Authentication;
import com.noe.hypercube.service.Dropbox;
import java.awt.*;
import java.io.IOException;
import java.util.Optional;
import javax.inject.Inject;
import javax.swing.*;
import org.apache.log4j.Logger;

public class DbxAuthentication extends Authentication<DbxClient> {

    private static final Logger LOG = Logger.getLogger(DbxAuthentication.class);

    @Inject
    private DbxWebAuthNoRedirect dbxWebAut;
    @Inject
    private DbxRequestConfig config;

    @Override
    public DbxClient createClient() throws IOException, DbxException {
        final Optional<AccountEntity> storedTokens = getStoredTokens();
        if (storedTokens.isPresent()) {
            final AccountEntity accountEntity = storedTokens.get();
            return new DbxClient(config, accountEntity.getAccessToken());
        } else {
            LOG.debug("Dropbox authentication started");
            final String authorizeUrl = dbxWebAut.start();
            Desktop.getDesktop().browse(java.net.URI.create(authorizeUrl));
            final String clientKey = showInputDialog();

            DbxAuthFinish authFinish = dbxWebAut.finish(clientKey);
            LOG.debug("Authentication finished");
            final String accessToken = authFinish.accessToken;
            storeTokens("", accessToken);
            return new DbxClient(config, accessToken);
        }
    }

    private String showInputDialog() {
        JFrame frame = new JFrame();
        frame.setAlwaysOnTop(true);
        final String authorizationCode = JOptionPane.showInputDialog(frame, "Please copy here the access key generated by Dropbox", "Hypercube - Dropbox authorization", JOptionPane.PLAIN_MESSAGE);
        if(authorizationCode == null || authorizationCode.isEmpty()) {
            throw new  RuntimeException("Could ot get authorization code for Dropbox");
        }
        return authorizationCode;
    }

    @Override
    public DbxClient getClient(String refreshToken, String accessToken) {
        return new DbxClient(config, accessToken);
    }

    @Override
    public String getAccountName() {
        return Dropbox.getName();
    }

}
